// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  dokter

  @@map("roles")
}

model User {
  id            Int            @id @default(autoincrement())
  username      String
  email         String         @unique
  password      String
  resetToken    String?        @map("reset_token")
  validasi      String?        @map("validasi")
  isActive      Boolean?       @map("is_active")
  role          Role
  profile       Profile?
  profileDoctor ProfileDoctor?
  review        Review[]
  notification  Notification[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  Transaction   Transaction[]

  @@map("users")
}

model Profile {
  id        Int      @id @default(autoincrement())
  name      String?
  phone     String?
  picture   String?
  city      String?
  province  String?
  country   String?
  userId    Int      @unique @map("users_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("profiles")
}

model ProfileDoctor {
  id                Int                 @id @default(autoincrement())
  name              String?
  phone             String?
  picture           String?
  spesialis         String?
  description       String?
  aboutUs           String?
  city              String?
  province          String?
  country           String?
  details           String?
  userId            Int                 @unique @map("users_id")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  biodata           Biodata[]
  experience        Experience[]
  education         Education[]
  practiceDoctor    PracticeOnDoctor[]
  hospitalDoctor    hospitalOnDoctor[]
  review            Review[]
  DetailTransaction DetailTransaction[]
  rating            Rating[]

  @@map("profiles_doctor")
}

model Biodata {
  id           Int            @id @default(autoincrement())
  organization String?
  language     String?
  doctorId     Int?
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  doctor       ProfileDoctor? @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("biodata")
}

model Experience {
  id        Int            @id @default(autoincrement())
  position  String?
  office    String?
  year      String?
  doctorId  Int?
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  doctor    ProfileDoctor? @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("experience")
}

model Education {
  id           Int            @id @default(autoincrement())
  name         String?
  programStudy String?        @map("program_studi")
  year         String?
  doctorId     Int?
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  doctor       ProfileDoctor? @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("education")
}

model Practice {
  id             Int                @id @default(autoincrement())
  days           String
  open           String
  close          String
  practiceDoctor PracticeOnDoctor[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("practices")
}

model PracticeOnDoctor {
  doctorId   Int
  practiceId Int
  doctor     ProfileDoctor @relation(fields: [doctorId], references: [id])
  practice   Practice      @relation(fields: [practiceId], references: [id])
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  @@id([doctorId, practiceId])
  @@map("practice_on_doctor")
}

model Hospital {
  id             Int                @id @default(autoincrement())
  name           String
  picture        String?
  city           String?
  province       String?
  country        String?
  details        String?
  location       String?
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  hospitalDoctor hospitalOnDoctor[]

  @@map("hospitals")
}

model hospitalOnDoctor {
  doctorId   Int
  hospitalId Int
  doctor     ProfileDoctor @relation(fields: [doctorId], references: [id])
  hospital   Hospital      @relation(fields: [hospitalId], references: [id])
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  @@id([doctorId, hospitalId])
  @@map("hospital_on_doctor")
}

model Review {
  id       Int            @id @default(autoincrement())
  value    Int?
  feedback String?
  userId   Int            @map("user_id")
  ratingId Int            @map("rating_id")
  doctorId Int?           @map("doctor_id")
  date     DateTime       @default(now())
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rating   Rating         @relation(fields: [ratingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor   ProfileDoctor? @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("reviews")
}

model Rating {
  id           Int            @id @default(autoincrement())
  overalRating Float?         @map("overal_rating")
  doctorId     Int?           @map("doctor_id")
  review       Review[]
  doctor       ProfileDoctor? @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("ratings")
}

model Notification {
  id      Int       @id @default(autoincrement())
  message String?
  time    DateTime? @default(now())
  isRead  Boolean?  @map("is_read")
  userId  Int       @map("user_id")
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("notifications")
}

model Transaction {
  id                Int                 @id @default(autoincrement())
  userId            Int                 @map("user_id")
  total             Float
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  detailTransaction DetailTransaction[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@map("transactions")
}

model PaymentMethod {
  id                Int                 @id @default(autoincrement())
  name              String
  createdAt         DateTime            @default(now()) @map("crated_at")
  updatedAt         DateTime            @updatedAt
  DetailTransaction DetailTransaction[]

  @@map("payment_method")
}

model DetailTransaction {
  id             Int           @id @default(autoincrement())
  doctorId       Int           @map("doctor_id")
  transactionId  Int           @map("transaction_id")
  paymentId      Int           @map("payment_id")
  paymentStatus  Boolean       @map("payment_status")
  cardNumber     String?       @map("card_number")
  cardHolderName String?       @map("card_holder_name")
  cvv            String?
  serialNumber   Float
  expiryDate     String?       @map("expiry_date")
  payment        PaymentMethod @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctor         ProfileDoctor @relation(fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  transaction    Transaction   @relation(fields: [transactionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@map("detail_transactions")
}

// PAKAR
model Symptom {
  id          Int        @id @default(autoincrement())
  code        String
  name        String
  probability Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  ruleBase    RuleBase[]

  @@map("symptom")
}

model Diseases {
  id          Int        @id @default(autoincrement())
  name        String
  code        String
  picture     String?
  solution    String?
  probability Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  ruleBase    RuleBase[]

  @@map("diseases")
}

model RuleBase {
  id         Int      @id @default(autoincrement())
  diseasesId Int      @map("diseases_id")
  symptomId  Int      @map("symptom_id")
  diseases   Diseases @relation(fields: [diseasesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  symptom    Symptom  @relation(fields: [symptomId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// PAKAR END

// ABOUT US
model VisiMisi {
  id          Int      @id @default(autoincrement())
  name        String
  bab         String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("visi_misi")
}

model Team {
  id          Int      @id @default(autoincrement())
  name        String
  picture     String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("teams")
}

model AboutUs {
  id          Int      @id @default(autoincrement())
  name        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("about_us")
}

model Tutorial {
  id          Int      @id @default(autoincrement())
  linkVideo   String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tutorial")
}

model Faq {
  id         Int      @id @default(autoincrement())
  pertanyaan String
  jawaban    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("(faq)")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact")
}
